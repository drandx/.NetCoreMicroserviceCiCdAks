trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'
  displayName: 'Restore Nuget Packages'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--no-restore'
  displayName: 'Build projects'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*Test.csproj'
    arguments: '--no-restore'
  displayName: 'Run Tests'

# Publishes all the artifacts into the same folder ($(Build.ArtifactStagingDirectory)/Output) separating them by project name folders
#- task: DotNetCoreCLI@2
#  inputs:
#    command: 'publish'
#    publishWebProjects: false
#    projects: '**/*.csproj'
#    arguments: '-o $(Build.ArtifactStagingDirectory)/Output'
#    zipAfterPublish: false
#    modifyOutputPath: true
#  displayName: 'DotNetCoreCLI publish all'
#  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: |
      CustomerApi.Functions.FunctionOne/CustomerApi.Functions.FunctionOne.csproj
    arguments: '-o $(Build.ArtifactStagingDirectory)/Output'
    zipAfterPublish: false
    modifyOutputPath: true
  displayName: 'DotNetCoreCLI publish FunctionOne only'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

- task: PublishBuildArtifacts@1
  displayName: Publish Artifacts
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)
    ArtifactName: $(Build.BuildNumber)
    ArtifactType: Container